%{
    #include "shared.h"
    #include "output.hpp"
    #include "scope.h"
    #include <iostream>

	#define YYDEBUG 1

    extern int yylex();
    
    extern int yylineno;
    extern char* yytext;
    
    extern ScopeGlobal* globals;
    int yyerror(char* message);

%}

%nonassoc IF
%nonassoc ELSE

%token LP
%token RP
%token LC
%token RC
%token SC
%token ASSIGN

%token INT
%token NIS
%token AGORA
%token PRINT
%token INPUT
%token<name> ID
%token<name> STRING
%token TRUE
%token FALSE

%token WHILE
%token BREAK
%token BOOL
%token<number> NUM

%right NOT

%left AND OR
%left SE GE EQ NEQ GT ST
%left PLUS MINUS
%left MULT DIV


%type<type> Type
%type<type> CoinType
%%

S	: Statements {}
	;

Statements	: Statements Statement {}
			| Statement {}
			;

Statement	: LC Statements RC {}	/* { ... } */
			| Type ID SC {globals->addVar($1,$2);}	   	/* int x; */
			| Type ID ASSIGN Exp SC {} /* int x = a+b; */
			| ID ASSIGN Exp SC {}	   /* x = a+b; */
			| PRINT ID SC {}   	   /* print x; */
			| PRINT STRING SC {}	   /* print "bla bla"; */
			| INPUT ID SC {}  	   /* input x; */
			| IF LP Exp RP Statement %prec IF {}   /* if ( x == 4 ) { ...} */
			| IF LP Exp RP Statement ELSE Statement %prec ELSE {}
			 /* if ( x == 4 ) { ...} else { ... } */
			| WHILE LP Exp RP Statement {} /* while ( x > 2 ) { ... } */
			| BREAK SC {}  /* break; */
			;

CoinType	: NIS {$$ = NIS_T;} /* NIS */
			| AGORA {$$ = AGORA_T;} /* AGORA */
			;

Type		: CoinType {$$ = $1;} 	    /* NIS */
		| INT {$$ = INT_T;}   	    /* int */
		| BOOL {$$ = BOOL_T;} 	    /* bool */
		;

Exp		: LP Exp RP {} 	    /* ( x < 4 ) */
		| Exp PLUS Exp {}   /* a + b */
		| Exp MINUS Exp {}  /* a - b */
		| Exp MULT Exp {}   /* a * b */
		| Exp DIV Exp {}    /* a / b */
		| ID {std::cout << "booya\n";}	      	    /* a */
		| NUM {}	    /* 4 */
		| NUM CoinType {}   /* 4 NIS */
		| TRUE {}	    /* True */
		| FALSE	{}	    /* False */
		| NOT Exp {}	    /* not (x < 4) */
		| Exp OR Exp {}	    /* (x > 4) || (x < 5) */
		| Exp AND Exp {}    /* (x > 4) && (x < 5) */
		| Exp Rel Exp %prec SE {}    /* x || 4 */
		;

Rel		: GT {} /* > */
		| GE {} /* >= */
		| ST {} /* < */
		| SE {} /* <= */
		| EQ {} /* == */
		| NEQ {} /* != */
		;
%%

int main()
{
	/* Init */
	globals = new ScopeGlobal();
		
	yyparse();
		
	/* Clean-up */
	delete globals;
}

int yyerror(char* message)
{
	std::cout << message << yytext <<std::endl;
	output::errorLex(yylineno);
}

